Question 1
The various methods in console functions:

1.) console.log()
Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.
Example:
// console.log() method
console.log('abc'); 

2.) console.error()
Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.
Example:
// console.error() method  
console.error('This is a simple error');  

3.) console.warn()
Used to log warning message to the console. By default the warning message will be highlighted with yellow color.
Example:
// console.warn() method  
console.warn('This is a warning.'); 

4.) console.clear()
Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like : ‘Console was cleared’ while in firefox no message is returned.
Example:
// console.clear() method  
console.clear();  

5.) console.time() and console.timeEnd()
Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided by the javascript console object. They take a label which must be same, and the code inside can be anything( function, object, simple console).
Example:
// console.time() and console.timeEnd() method  
console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 let fun2 = function(){ 
     console.log('fun2 is running..'); 
 } 
fun(); // calling fun(); 
 fun2(); // calling fun2(); 
console.timeEnd('abc'); 

6.) console.table()
This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.
Example:
// console.table() method 
console.table({'a':1, 'b':2}); 

7.) console.count()
This method is used to count the number that the function hit by this counting method.
Example:
// console.count() method 
for(let i=0;i<5;i++){ 
    console.count(i); 
} 

8.) console.group() and console.groupEnd()
group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. 
Just like the time() and the timeEnd() they also accepts label, again of same value.
Example:
// console.group() and console.groupEnd() method 
console.group('simple'); 
  console.warn('warning!'); 
  console.error('error here'); 
  console.log('vivi vini vici'); 
console.groupEnd('simple'); 
console.log('new section'); 

9.) Custom Console Logs
User can add Styling to the console logs in order to make logs Custom . 
The Syntax for it is to add the css styling as a parameter to the logs which will replace %c in the logs as shown in the example below .
Example:
// Custom Console log example 
  const spacing = '10px'; 
  const styles =  
        `padding: ${spacing}; background-color: white; color: green; font-style:  
         italic; border: 1px solid black; font-size: 2em;`; 
  console.log('%cGeeks for Geeks', styles); 

10.) Console Sidebar
Console sidebar is used to organize logs and provides clarity in debugging experience.


Question 2
The difference between var,let and const with code examples:

1.) var: The scope of a variable defined with the keyword “var” is limited to the “function” within which it is defined. 
If it is defined outside any function, the scope of the variable is global.
var is “function scoped”.
Example:
{
  var a=10;
  console.log(a);
} //block 1
{
  a++;
  console.log(a);
} //block 2
/* Since we are using "var a=10", scope of "a" is limited to the function within which it is defined. 
In this case it is within the global function scope */

2.) let: The scope of a variable defined with the keyword “let” or “const” is limited to the “block” defined by curly braces i.e. {} .
“let” and “const” are“block scoped”.
Example:
{
 let a=10;
 console.log(a);
} //block 1
{
  a++;
  console.log(a);
} //block 2
/* Since we are using "let a=10", scope of "a" is limited to block 1 and "a" is not recognized in block 2 */

3.) const: The scope of a variable defined with the keyword “const” is limited to the block defined by curly braces. 
However if a variable is defined with keyword const, it cannot be reassigned.
“const” cannot be re-assigned to a new value. However it CAN be mutated.
Example:
{
 const PI=3.14;
 console.log(PI);
} //block 1
{
  console.log(PI);
} //block 2
/* Since we are using "const PI=3.14", scope of "PI" is limited to block 1 and "PI" is not recognized in block 2 */


Question 3
Brief intro on available datatypes in javascript:

There are six basic data types in JavaScript,
1.) The String Data Type
The string data type is used to represent textual data (i.e. sequences of characters). 
Strings are created using single or double quotes surrounding one or more characters.
Example:
var a = 'Hi there!';  // using single quotes
var b = "Hi there!";  // using double quotes

2,) The Number Data Type
The number data type is used to represent positive or negative numbers with or without decimal place, 
or numbers written using exponential notation e.g. 1.5e-4 (equivalent to 1.5x10-4).
Example:
var a = 25;         // integer
var b = 80.5;       // floating-point number
var c = 4.25e+6;    // exponential notation, same as 4.25e6 or 4250000
var d = 4.25e-6;    // exponential notation, same as 0.00000425

3.) The Boolean Data Type
The Boolean data type can hold only two values: true or false. 
It is typically used to store values like yes (true) or no (false), on (true) or off (false), etc. 
Example:
var isReading = true;   // yes, I'm reading
var isSleeping = false; // no, I'm not sleeping

4.) The Undefined Data Type
The undefined data type can only have one value-the special value undefined.
 If a variable has been declared, but has not been assigned a value, has the value undefined.
Example:
var a;
var b = "Hello World!"
alert(a) // Output: undefined
alert(b) // Output: Hello World!

5.) The Null Data Type
This is another special data type that can have only one value-the null value. 
A null value means that there is no value. It is not equivalent to an empty string ("") or 0, it is simply nothing.
A variable can be explicitly emptied of its current contents by assigning it the null value.
Example:
var a = null;
alert(a); // Output: null
var b = "Hello World!"
alert(b); // Output: Hello World!
b = null;
alert(b) // Output: null

6.) The Object Data Type
The object is a complex data type that allows you to store collections of data.
An object contains properties, defined as a key-value pair. A property key (name) is always a string, 
but the value can be any data type, like strings, numbers, booleans, or complex data types like arrays, function and other objects. 
Example:
var emptyObject = {};
var person = {"name": "Clark", "surname": "Kent", "age": "36"};
var car = {
    "modal": "BMW X3",
    "color": "white",
    "doors": 5
}

7.) The Array Data Type
An array is a type of object used for storing multiple values in single variable. 
Each value (also called an element) in an array has a numeric position, known as its index, and 
it may contain data of any data type-numbers, strings, booleans, functions, objects, and even other arrays. 
The array index starts from 0, so that the first array element is arr[0] not arr[1].
Example:
var colors = ["Red", "Yellow", "Green", "Orange"];
var cities = ["London", "Paris", "New York"];
alert(colors[0]);   // Output: Red
alert(cities[2]);   // Output: New York

8.) The Function Data Type
The function is callable object that executes a block of code. 
Since functions are objects, so it is possible to assign them to variables.
Example:
var greeting = function(){ 
    return "Hello World!"; 
}
alert(typeof greeting) // Output: function
alert(greeting());     // Output: Hello World!

9.) The typeof Operator
The typeof operator can be used to find out what type of data a variable or operand contains. 
It can be used with or without parentheses (typeof(x) or typeof x).
Example:
typeof 15;  // Returns: "number"
typeof 42.7;  // Returns: "number"
typeof 2.5e-4;  // Returns: "number"
typeof Infinity;  // Returns: "number"
typeof NaN;  // Returns: "number".
